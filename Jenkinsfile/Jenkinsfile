pipeline {
    agent any
    environment {
        VAULT_ADDR = credentials('VAULT_ADDR') // HashiCorp Vault address
        VAULT_TOKEN = credentials('VAULT_TOKEN') // HashiCorp Vault token
        PATH = "/opt/sonar-scanner/bin:$PATH" // Adding Sonar Scanner to PATH
    }
    stages {
        // Test Vault Connection
        stage('Test Vault') {
            steps {
                sh '''
                echo "Testing Vault Connection..."
                export VAULT_ADDR="${VAULT_ADDR}"
                export VAULT_TOKEN="${VAULT_TOKEN}"

                vault read -format=json aws/creds/dev-role > aws_creds.json || { echo "Vault read failed"; exit 1; }
                jq -r '.data.access_key' aws_creds.json > access_key.txt || { echo "Failed to extract access key"; exit 1; }
                jq -r '.data.secret_key' aws_creds.json > secret_key.txt || { echo "Failed to extract secret key"; exit 1; }
                '''
            }
        }

        // Terraform Security Scan (TFScan)
        stage('TFScan') {
            steps {
                dir('terraform') {
                    sh '''
                    echo "Running TFScan..."
                    tfsec . | tee tfscan-report.txt || echo "TFScan completed with warnings."

                    echo "Verifying TFScan report..."
                    ls -l tfscan-report.txt || { echo "TFScan report not found"; exit 1; }
                    '''
                }
                archiveArtifacts artifacts: 'terraform/tfscan-report.txt', allowEmptyArchive: true
            }
        }

        // Terraform Plan
        stage('Terraform Plan') {
            steps {
                dir('terraform') {
                    sh '''
                    echo "Initializing Terraform..."
                    terraform init || { echo "Terraform init failed"; exit 1; }

                    echo "Planning Terraform changes..."
                    terraform plan \
                        -out=tfplan \
                        -var="aws_access_key=$(cat ../access_key.txt)" \
                        -var="aws_secret_key=$(cat ../secret_key.txt)" | tee terraform-plan.txt || { echo "Terraform plan failed"; exit 1; }
                    '''
                }
            }
        }

        // Terraform Apply
        stage('Terraform Apply') {
            steps {
                dir('terraform') {
                    sh '''
                    echo "Applying Terraform changes..."
                    terraform apply -auto-approve tfplan || { echo "Terraform apply failed"; exit 1; }
                    '''
                }
            }
        }

        // Run Node.js Tests
        stage('Run Node.js Tests') {
            steps {
                dir('src') {
                    sh '''
                    echo "Cleaning up existing node_modules..."
                    rm -rf node_modules package-lock.json

                    echo "Installing dependencies..."
                    npm install || { echo "npm install failed"; exit 1; }

                    echo "Running tests with coverage..."
                    npm test -- --coverage || { echo "Tests failed"; exit 1; }

                    echo "Creating app.tar.gz artifact..."
                    tar --exclude=app.tar.gz -czf app.tar.gz * || { echo "Failed to create artifact"; exit 1; }

                    echo "Listing artifact contents..."
                    tar -tf app.tar.gz || { echo "Failed to verify artifact contents"; exit 1; }
                    '''
                }
            }
        }

        // SonarQube Analysis
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh '''
                    echo "Running SonarQube Analysis..."
                    sonar-scanner \
                        -Dsonar.projectKey=Project \
                        -Dsonar.sources=src \
                        -Dsonar.host.url=http://52.66.251.62:9000/ \
                        -Dsonar.login=sqa_6c22027d63c27dc6b4aa343136c1e112465616a8 || { echo "SonarQube analysis failed"; exit 1; }
                    '''
                }
            }
        }

        // Docker Build, Scan & Push
        stage('Docker Build, Scan & Push') {
            steps {
                dir('src') {
                    sh '''
                    echo "Fetching Docker credentials from Vault..."
                    export VAULT_ADDR="${VAULT_ADDR}"
                    export VAULT_TOKEN="${VAULT_TOKEN}"

                    DOCKER_USERNAME=$(vault kv get -field=username secret/docker) || { echo "Failed to fetch Docker username"; exit 1; }
                    DOCKER_PASSWORD=$(vault kv get -field=password secret/docker) || { echo "Failed to fetch Docker password"; exit 1; }

                    echo "Building Docker image..."
                    docker build -t $DOCKER_USERNAME/sample-ecommerce-nodejs-app:latest  . || { echo "Docker build failed"; exit 1; }

                    echo "Scanning Docker image with Trivy..."
                    trivy image --severity HIGH,CRITICAL $DOCKER_USERNAME/sample-ecommerce-nodejs-app:latest | tee trivy-report.txt || echo "Trivy scan completed with warnings."

                    echo "Verifying Trivy report..."
                    ls -l trivy-report.txt || { echo "Trivy report not found"; exit 1; }

                    echo "Logging in to Docker Hub..."
                    echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin || { echo "Docker login failed"; exit 1; }

                    echo "Pushing Docker image to Docker Hub..."
                    docker push $DOCKER_USERNAME/sample-ecommerce-nodejs-app:latest || { echo "Docker push failed"; exit 1; }
                    '''
                }
                archiveArtifacts artifacts: 'trivy-report.txt', allowEmptyArchive: true
            }
        }

        // Nexus Integration
        stage('Nexus Integration') {
            steps {
                sh '''
                echo "Fetching Nexus credentials from Vault..."

                export VAULT_ADDR="${VAULT_ADDR}"
                export VAULT_TOKEN="${VAULT_TOKEN}"

                NEXUS_USERNAME=$(vault kv get -field=username nexus/credentials) || { echo "Failed to fetch Nexus username"; exit 1; }
                NEXUS_PASSWORD=$(vault kv get -field=password nexus/credentials) || { echo "Failed to fetch Nexus password"; exit 1; }
                NEXUS_REPO_URL=$(vault kv get -field=repo_url nexus/credentials) || { echo "Failed to fetch Nexus repo URL"; exit 1; }

                echo "Uploading Node.js application archive to Nexus..."
                ARTIFACT=src/app.tar.gz
                tar -czf $ARTIFACT src/ || { echo "Failed to create artifact"; exit 1; }

                curl -u $NEXUS_USERNAME:$NEXUS_PASSWORD \
                    --upload-file $ARTIFACT \
                    $NEXUS_REPO_URL/repository/nodejs-app/ || { echo "Failed to upload artifact to Nexus"; exit 1; }
                '''
            }
        }

        // Snyk Security Scan
        stage('Snyk Security Scan') {
            steps {
                dir('src') {
                    sh '''
                    echo "Running Snyk Security Scan..."
                    snyk test --json > snyk-results.json || echo "Snyk scan completed with warnings."
                    echo "Verifying Snyk report..."
                    ls -l snyk-results.json || { echo "Snyk report not found"; exit 1; }
                    '''
                }
                archiveArtifacts artifacts: 'src/snyk-results.json', allowEmptyArchive: true
            }
        }

        // Send Slack Notification
        stage('Send Slack Notification') {
            steps {
                script {
                    def buildStatus = currentBuild.currentResult
                    def color = (buildStatus == 'SUCCESS') ? 'good' : 'danger'

                    slackSend (
                        channel: '#team-devops',
                        message: "ðŸš€ *Jenkins Pipeline Execution Completed: ${buildStatus}*",
                        color: color
                    )
                }
            }
        }
    }
}
