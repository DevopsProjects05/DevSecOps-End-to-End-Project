pipeline {
    agent any
    environment {
        VAULT_ADDR = credentials('VAULT_ADDR')
        VAULT_TOKEN = credentials('VAULT_TOKEN')
        PATH = "/opt/sonar-scanner/bin:$PATH"
        TERRAFORM_DIR = "terraform/"
    }
    stages {
        
        stage('Test Vault') {
            steps {
                sh '''
                echo "Testing Vault Connection..."
                export VAULT_ADDR="${VAULT_ADDR}"
                export VAULT_TOKEN="${VAULT_TOKEN}"

                vault read -format=json aws/creds/dev-role > aws_creds.json || { echo "Vault read failed"; exit 1; }
                jq -r '.data.access_key' aws_creds.json > access_key.txt
                jq -r '.data.secret_key' aws_creds.json > secret_key.txt
                '''
            }
        }

        stage('Run Node.js Tests') {
            steps {
                dir('src') {
                    sh '''
                    echo "Running Node.js tests..."
                    npm install || { echo "npm install failed"; exit 1; }
                    '''
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube') {
                        sh '''
                        echo "Running SonarQube Analysis..."
                        sonar-scanner \
                            -Dsonar.projectKey=Project \
                            -Dsonar.sources=src \
                            -Dsonar.host.url=http://13.201.137.168:9000/ \
                            -Dsonar.login=sqa_6c22027d63c27dc6b4aa343136c1e112465616a8 | tee sonar-report.txt
                           '''
                    }      

                }
            }
        }

        stage('Snyk Security Scan') {
            steps {
                dir('src') {
                    sh '''
                    echo "Running Snyk Security Scan..."
                    snyk test --json > snyk-results.json || echo "Snyk scan completed with warnings."
                    '''
                }
                archiveArtifacts artifacts: 'src/snyk-results.json', allowEmptyArchive: true
            }
        }

        stage('TFScan') {
            steps {
                dir('terraform') {
                    sh '''
                    echo "Running TFScan..."
                    tfsec . > tfsec-results.json || { echo "TFSec scan failed"; exit 1; }
                    '''
                }
                archiveArtifacts artifacts: 'terraform/tfscan-report.txt', allowEmptyArchive: true
            }
        }

        stage('Terraform init & Plan') {
            steps {
                dir('terraform') {
                    sh '''
                    echo "Initializing Terraform..."
                    terraform init || { echo "Terraform init failed"; exit 1; }

                    echo "Planning Terraform changes..."
                    terraform plan -out=tfplan -var="aws_access_key=$(cat ../access_key.txt)" -var="aws_secret_key=$(cat ../secret_key.txt)"
                    '''
                }
            }
        }

        stage('Docker Build and Trivy Scan') {
            steps {
                dir('src') {
                    sh '''
                    echo "Fetching Docker credentials from Vault..."
                    export VAULT_ADDR="${VAULT_ADDR}"
                    export VAULT_TOKEN="${VAULT_TOKEN}"

                    DOCKER_USERNAME=$(vault kv get -field=username secret/docker)
                    DOCKER_PASSWORD=$(vault kv get -field=password secret/docker)

                    echo "Building Docker image..."
                    docker build -t $DOCKER_USERNAME/sample-ecommerce-nodejs-app:latest . || { echo "Docker build failed"; exit 1; }

                    echo "Scanning Docker image with Trivy..."
                    trivy image --severity HIGH,CRITICAL $DOCKER_USERNAME/sample-ecommerce-nodejs-app:latest > trivy-results.json
                    '''
                    echo "Archiving Trivy scan results..."
                    archiveArtifacts artifacts: 'trivy-results.json', allowEmptyArchive: true
                }
            }
        }

    stage('Nexus Integration') {
        steps {
            script {
                echo 'Fetching Nexus credentials from Vault...'
                // Fetch credentials from Vault
                NEXUS_USERNAME = sh(script: 'vault kv get -field=username nexus/credentials', returnStdout: true).trim()
                NEXUS_PASSWORD = sh(script: 'vault kv get -field=password nexus/credentials', returnStdout: true).trim()
                NEXUS_REPO_URL = sh(script: 'vault kv get -field=repo_url nexus/credentials', returnStdout: true).trim()

                echo 'Uploading Node.js app to Nexus...'
                // Create a temporary directory for the archive
                sh '''
                mkdir -p tmp
                tar -czf tmp/app.tar.gz src/
                '''
                
                // Upload the archive to Nexus
                sh """
                curl -u ${NEXUS_USERNAME}:${NEXUS_PASSWORD} \
                    --upload-file tmp/app.tar.gz \
                    ${NEXUS_REPO_URL}/repository/nodejs-app/
                """
            }   
        }
    }


    stage('Terraform Apply') {
        steps {
            dir('terraform') {
                    withCredentials([sshUserPrivateKey(credentialsId: 'ANSIBLE_SSH_KEY', keyFileVariable: 'SSH_KEY_PATH')]) {
                    sh '''
                    echo "Applying Terraform changes..."
                    terraform apply -auto-approve tfplan

                    echo "Fetching Public IP from Terraform output..."
                    PUBLIC_IP=$(terraform output -json public_ips | jq -r '.[0]')
                    echo "Public IP: ${PUBLIC_IP}"

                    echo "Storing Public IP in Ansible inventory..."
                    mkdir -p ../ansible
                    echo "[webserver]" > ../ansible/inventory.ini
                    echo "${PUBLIC_IP} ansible_user=ec2-user ansible_ssh_private_key_file=${SSH_KEY_PATH}" >> ../ansible/inventory.ini

                    echo "Verifying inventory file..."
                    cat ../ansible/inventory.ini
                    '''
                }    
            }
        }
    }

    stage('Run Ansible Playbook') {
        steps {
            dir('ansible') {
                withCredentials([sshUserPrivateKey(credentialsId: 'ANSIBLE_SSH_KEY', keyFileVariable: 'SSH_KEY_PATH')]) {
                    sh '''
                    echo "Fixing SSH key permissions..."
                    chmod 400 ${SSH_KEY_PATH}

                    echo "Copying SSH Key to a Safe Location..."
                    mkdir -p /tmp/ansible
                    chmod 777 /tmp/ansible/ansible_ssh_key.pem
                    cp ${SSH_KEY_PATH} /tmp/ansible/ansible_ssh_key.pem
                    

                    echo "Updating inventory file with correct SSH key path..."
                    echo "[webserver]" > inventory.ini
                    echo "${terraform output -json public_ips} ansible_user=ec2-user ansible_ssh_private_key_file=/tmp/ansible/ansible_ssh_key.pem" >> inventory.ini

                    echo "Disabling SSH host key checking..."
                    export ANSIBLE_HOST_KEY_CHECKING=False

                    echo "Checking for Ansible playbook..."
                    if [ ! -f "playbook.yml" ]; then
                        echo "Error: playbook.yml not found! Ensure the playbook is available."
                        exit 1
                    fi

                    echo "Running Ansible Playbook..."
                    ansible-playbook -i inventory.ini playbook.yml \
                        --private-key=/tmp/ansible/ansible_ssh_key.pem \
                        --user ec2-user -vvv || { echo "Ansible Playbook execution failed!"; exit 1; }

                    echo "Ansible Playbook executed successfully."
                    '''
                }   
            }
        }
    }


        stage('Send Slack Notification') {
            steps {
                script {
                    def buildStatus = currentBuild.currentResult
                    def color = (buildStatus == 'SUCCESS') ? 'good' : 'danger'

                    slackSend (
                        channel: '#team-devops',
                        message: "ðŸš€ *Jenkins Pipeline Execution Completed: ${buildStatus}*",
                        color: color
                    )
                }
            }
        }
    }
}
